/* onvifdiscoveryTester.cpp
   Generated by gSOAP 2.8.111 for ../../../gsoap-2.8.111/gsoap/import/wsdd10.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/
/*
   Stand-alone server auto-test code:
   Takes request from standard input or over TCP/IP socket and returns
response to standard output or socket

   Compile:
   cc soapTester.c soapServer.c soapC.c stdsoap2.c

   Command line usage with redirect over stdin/out:
   > ./a.out < SomeTest.req.xml
   > ./a.out 12288 < SomeTest.req.xml
     Note: 12288 = SOAP_XML_INDENT | SOAP_XML_STRICT (see codes in stdsoap2.h)
   Command line usage to start server at port 8080:
   > a.out 12288 8080
*/

#include "onvifdiscoverywsddService.h"
#include "wsdd.nsmap"



#ifndef SOAP_DEFMAIN
# define SOAP_DEFMAIN main	/* redefine to use your own main() */
#endif

int SOAP_DEFMAIN(int argc, char **argv)
{
	wsddService service(argc > 1 ? atoi(argv[1]) : 0);
	if (argc <= 2)
		return service.serve();
	while (service.run(atoi(argv[2])) != SOAP_OK && service.soap->error != SOAP_TCP_ERROR)
		service.soap_print_fault(stderr);
	return 0;
}


/** Auto-test server operation SOAP_ENV__Fault */
int wsddService::Fault(char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	(void)soap; /* appease -Wall -Werror */
	return SOAP_OK;
}


/** Auto-test server operation __wsdd__Hello */
int wsddService::Hello(struct wsdd__HelloType *wsdd__Hello)
{
	(void)soap; /* appease -Wall -Werror */
	return SOAP_OK;
}


/** Auto-test server operation __wsdd__Bye */
int wsddService::Bye(struct wsdd__ByeType *wsdd__Bye)
{
	(void)soap; /* appease -Wall -Werror */
	return SOAP_OK;
}


/** Auto-test server operation __wsdd__Probe */
int wsddService::Probe(struct wsdd__ProbeType *wsdd__Probe)
{
	(void)soap; /* appease -Wall -Werror */
	return SOAP_OK;
}


/** Auto-test server operation __wsdd__ProbeMatches */
int wsddService::ProbeMatches(struct wsdd__ProbeMatchesType *wsdd__ProbeMatches)
{
	(void)soap; /* appease -Wall -Werror */
	return SOAP_OK;
}


/** Auto-test server operation __wsdd__Resolve */
int wsddService::Resolve(struct wsdd__ResolveType *wsdd__Resolve)
{
	(void)soap; /* appease -Wall -Werror */
	return SOAP_OK;
}


/** Auto-test server operation __wsdd__ResolveMatches */
int wsddService::ResolveMatches(struct wsdd__ResolveMatchesType *wsdd__ResolveMatches)
{
	(void)soap; /* appease -Wall -Werror */
	return SOAP_OK;
}
